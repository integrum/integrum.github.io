{"id":7287,"date":"2013-06-20T06:00:48","date_gmt":"2013-06-20T13:00:48","guid":{"rendered":"http:\/\/integrumtech.com\/?p=7287"},"modified":"2013-06-20T06:00:48","modified_gmt":"2013-06-20T13:00:48","slug":"episode-112-7-agile-best-practices-that-you-dont-need-to-follow","status":"publish","type":"post","link":"http:\/\/integrumtech.com\/2013\/06\/episode-112-7-agile-best-practices-that-you-dont-need-to-follow\/","title":{"rendered":"Episode #112 &#8211; 7 Agile Best Practices that You Don&#8217;t Need to Follow"},"content":{"rendered":"<p>Roy van de Water, Derek Neighbors and Clayton Lengel-Zigich discuss an article that has been making the rounds in the Agile community this week: <a href=\"http:\/\/agile.dzone.com\/articles\/7-agile-best-practices-you\">7 Agile Best Practices that You Don\u2019t Need to Follow<\/a><\/p>\n<p>&nbsp;<\/p>\n<p><em>Transcript<\/em><\/p>\n<p><strong>Clayton Lengel\u2011Zigich<\/strong>: \u00a0Welcome to another episode of the Agile Weekly Podcast. I&#8217;m Clayton Lengel\u2011Zigich.<\/p>\n<p><strong>Derek Neighbors<\/strong>: \u00a0I&#8217;m Derek Neighbors.<\/p>\n<p><strong>Roy van de Water<\/strong>: \u00a0I&#8217;m Roy van de Water.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Today, we will be talking about the much talked about Seven Agile Best Practices That You Don&#8217;t Necessarily Need To Do article. If you haven&#8217;t read it, it&#8217;s on the Agile DZone. It&#8217;s called Seven Agile Best Practices That You Don&#8217;t Need To Follow by Jim Bird.<\/p>\n<p>We&#8217;re going to talk a few minutes on each of these. First one is test\u2011driven development. That&#8217;s one that somehow became synonymous with Agile teams, that Agile teams do TDD. What do you guys think? Do you have to do TDD?<\/p>\n<p><strong>Derek<\/strong>: \u00a0No.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Yeah, I&#8217;m going to say that.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0[laughs] Next. Let&#8217;s explore a little bit why that became so pervasive. Why does everyone thing that you have to do TDD if you&#8217;re doing Agile?<\/p>\n<p><strong>Derek<\/strong>: \u00a0Because there is a difference between Agile and good. So it&#8217;s like if you want to be good, you have to do TDD. If you just want to be Agile, like, &#8220;Hey, you don&#8217;t need to do TDD.&#8221;<\/p>\n<p><strong>Roy<\/strong>: \u00a0Also, there&#8217;s a huge feedback component to Agile, right? It&#8217;s all about quick iterations and getting feedback early. I think test driven development is the programming embodiment of that. It&#8217;s the idea of asking for feedback before you even start coding and then, gaining feedback as you code towards the failing test.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Do you think it would be fair to say that you would have to do TDD if you were doing extreme programming?<\/p>\n<p><strong>Roy<\/strong>: \u00a0Yeah.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Yes. I would say you would. I don&#8217;t remember his full arguments on this, but I think it comes down to studies say TDD is not as good. If you know what you&#8217;re doing, then TDD is good, but if you don&#8217;t know. The only time that I really say that TDD should be super optional would be if your start\u2011up, you&#8217;ve got a limited amount of money and you have to meet the next date and slow at TDD because you don&#8217;t know how to do it.<\/p>\n<p>If you are competent with TDD, there is no reason not to do it. If you are going to be long\u2011term with a project, then there&#8217;s no reason not to do it.<\/p>\n<p><strong>Roy<\/strong>: \u00a0So part of the argument also talks about that statistically there&#8217;s an increase in complexity with TDD, oftentimes in terms of design, which I&#8217;d have to make assumptions, but I&#8217;m assuming it&#8217;s based off of probably not knowing how to do TDD properly, like abusing the crap out of mocks and spies and all of those patterns, and creating tests that are really brutally coupled to the specific implementation.<\/p>\n<p><strong>Derek<\/strong>: \u00a0It doubles the lines of code, so therefore, it&#8217;s got to be twice as complex.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Right, when people, when teams get&#8230;<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Speaking of doubling, pair programming. Do you have to have two people working, do you have to do pairing if you&#8217;re on an Agile team?<\/p>\n<p><strong>Roy<\/strong>: \u00a0No. I feel like you have to be doing some form of pairing, like it may not necessarily be pair programming. But like people working by themselves, that&#8217;s not a team. Like leave Agile alone. Like I feel like a bunch of people working by themselves in isolation is not a team. So I almost feel like there has to be a pairing component in terms of like pair\u2011planning or pair design or pair&#8230;<\/p>\n<p>[crosstalk]<\/p>\n<p><strong>Clayton<\/strong>: \u00a0So the only way you can do that is by pairing?<\/p>\n<p><strong>Roy<\/strong>: \u00a0No. I suppose not. And I suppose they very specifically mean pair programming.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Yeah, because I go to a whole lot of planning meetings that aren&#8217;t paired but I think that the people there are co\u2011creating solutions together.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Sure.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Again that&#8217;s one to me just like TDDing. If you want to be good, you probably should pair. If you want to be Agile, you don&#8217;t have to pair.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Right. Some of the arguments are for the idea like, that some people don&#8217;t like to pair and some people will be slowed down by other people like that.<\/p>\n<p>If I&#8217;m really good and Clayton sucks, [sarcastic] using a realistic example, [laughing] then what we would have is like Clayton would be slowing me down all of the time, which I think is kind of the wrong way to think of that, it&#8217;s like I&#8217;d be teaching Clayton some awesome new stuff that he doesn&#8217;t know yet&#8230; [crosstalk] &#8230;and that&#8217;s more important in the long run.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0They hit on or he hits on some of other common arguments about introverts versus extroverts and like smashing creativity and you won&#8217;t have time to be innovative and all that kind of thing.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Like you won&#8217;t have the opportunity to go heads down and really solve complex problems but arguably, if you&#8217;re pairing properly, you&#8217;re turning all your complex problems into simple ones and you don&#8217;t end up with those types of huge complex Rube Goldberg solutions.<\/p>\n<p><strong>Derek<\/strong>: \u00a0I keep saying that you know the problem with exercising for me is that it leaves less time for eating ice cream and clearly this is a problem.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0OK the next one is emerging design and metaphor. One thing I don&#8217;t think a lot of people especially kind of the new Agile crowd I don&#8217;t think they really have embraced metaphor at all. I don&#8217;t ever hear people talking about the importance of metaphor not now at least.<\/p>\n<p><strong>Derek<\/strong>: \u00a0So I can&#8217;t speak without using metaphors, like I think you have to have metaphors to be Agile.<\/p>\n<p>[crosstalk]<\/p>\n<p><strong>Roy<\/strong>: \u00a0They have to be sports metaphors.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Not always but usually, just because sexual ones aren&#8217;t very you know reasonable to do at work. I will remember a conversation with Chet, I believe about this, and I think they kind of said that XP dropped the metaphor at some point, and I want to say that the reason they dropped it is because it&#8217;s too fucking hard to do. Which speaks volumes for the shit that&#8217;s really good is hard to do. I think that people throw away the stuff that&#8217;s hard to do first.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Like BDD. If you look at that, and you talk about &#8220;Let&#8217;s have ubiquitous language, and let&#8217;s have a shared language.&#8221; That&#8217;s really difficult. And there are a lot of times where people can&#8217;t even think of a way to describe some part of the system, so they just throw it away. [crosstalk] They give it up.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Exactly. You almost put it in the box of the metaphor: &#8220;Well this doesn&#8217;t fit our metaphor, so I guess we can&#8217;t do it.&#8221;<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Right. One thing that he talks about in the article is changing the metaphor, or having to get rid of it, or being pigeonholed by it. If the metaphor is meaningful, I think you can make it work most of the time. If you need to change it, I think you can have a good reason to change it.<\/p>\n<p><strong>Roy<\/strong>: \u00a0It&#8217;s interesting to pair this up with emergent design because I don&#8217;t necessarily put those two in the same box in my head. Emergent design, the idea being &#8220;I&#8217;m not going to design this entire thing up front. I&#8217;m going to be able to build on top of it as it goes on.&#8221;<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Then that&#8217;s some of the fallacy that in Agile you never talk about design. This is, in practice, not true. I think if you go to high\u2011performing Agile teams, they&#8217;re talking a lot about design. They just don&#8217;t do the huge design up front stuff. But, they don&#8217;t not talk about it.<\/p>\n<p><strong>Roy<\/strong>: \u00a0And, it stays flexible the entire time, so nobody&#8217;s totally stuck on a particular interpretation&#8230;<\/p>\n<p><strong>Derek<\/strong>: \u00a0[sarcastically] How are you going to grow your architecture e\u2011peen if you have emergent design? Now, come on.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0There you go.<\/p>\n<p>[crosstalk]<\/p>\n<p><strong>Derek<\/strong>: \u00a0I want to back on this one a little bit. Look at some of the most prolific onbaoarding applications of computer history. If you look at Twitter, if you look at Facebook, if you look at some of these companies that have gone from zero users to several hundred million users in a very short period of time, all of their architecture was created using emergent design from a standpoint of they didn&#8217;t know what they didn&#8217;t know.<\/p>\n<p>I believe there&#8217;s an article on this. We&#8217;ll try to see if we can get it in the show notes. Twitter had done a ton of performance testing. They had done a ton of load. They had done a ton of stuff where they could deal with literally hundreds of thousands of follows per second happening on the system. What do you know? Ashton Kutcher goes on &#8220;David Letterman&#8221; and says, &#8220;I want to be the first person to a million followers. Everybody go follow me right now.&#8221;<\/p>\n<p>Total edge case in, &#8220;Yes, we support a hundred thousand users following another user, but we don&#8217;t support a hundred thousand people following the same user in a one second time frame.&#8221;<\/p>\n<p>How do you deal with those things that come up? You can&#8217;t cover every edge case, and I think continuous deployment has moved us to a point where what you&#8217;re really doing is saying, &#8220;We discover by the feedback the system gets us.&#8221; And, we&#8217;re able to adapt and deploy so continuously and so quickly, that it doesn&#8217;t feel like we have architecture problems. I think this is something that the old\u2011school, old guard just can&#8217;t deal with. It&#8217;s like, &#8220;No, but we have to get it right the first time!&#8221;<\/p>\n<p><strong>Roy<\/strong>: \u00a0I kind of feel like if you don&#8217;t have some form of emergent design you are, by definition, not doing Agile.<\/p>\n<p><strong>Derek<\/strong>: \u00a0You&#8217;re screwed!<\/p>\n<p><strong>Roy<\/strong>: \u00a0Right? Because, other than the human relationship and that component of it, I feel like the ability to pivot and change your mind as you gain new information is the fundamental core.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0What about daily stand\u2011ups? Roy, you just mentioned the human component. Getting together and talking to other people on the team on a daily basis. Is that something you have to do?<\/p>\n<p><strong>Derek<\/strong>: \u00a0Is that what they said? I don&#8217;t know the wording. To me, if they said &#8220;daily stand\u2011ups,&#8221; no, I don&#8217;t think daily stand\u2011ups are mandatory. Do I think the people on the team need to talk to each other at least one time throughout the day? Yes. I think that is necessary.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0To really nit\u2011pick, I think what they&#8217;re really getting at is, &#8220;Does everyone have to stand up?&#8221;<\/p>\n<p><strong>Roy<\/strong>: \u00a0We didn&#8217;t. We did an entire episode on whether or not you should stand up during a stand\u2011up. We came to determine that yes, you should.<\/p>\n<p><strong>Derek<\/strong>: \u00a0I think it goes back to &#8220;Do you want to be good, or do you want to be Agile?&#8221; I think you could be totally Agile without doing any kind of formal stand\u2011up. I think if you want to be good, it&#8217;s just like using a white board versus using a tool. Can you do things without using white board? Sure. But, you get some benefits from the other one that you don&#8217;t.<\/p>\n<p><strong>Roy<\/strong>: \u00a0I&#8217;m guessing that part of this is driven through experiencing bad stand\u2011ups that are a waste of your time. Because just like any other meeting, you can screw this one up, and make it a total waste of everyone&#8217;s time. Where it&#8217;s just like a status report, and I go, &#8220;Yesterday, I did X, today I&#8217;m going to do Y, no blockers.&#8221; Nobody is listening to each other. You&#8217;re totally defeating the purpose.<\/p>\n<p><strong>Derek<\/strong>: \u00a0I see another one too with a lot of teams that are co\u2011located and within the zone proximity. &#8220;We sit next to each other all day long and we pair, so why do we need a stand up? We&#8217;ve got a physical board. We sit next to each other. We talk to each other every day. Everybody already knows what everybody is doing. Why the hell do we need to do a stand up every day?&#8221;<\/p>\n<p><strong>Clayton<\/strong>: \u00a0I think what&#8217;s funny is that most the time those people don&#8217;t actually know what is happening.<\/p>\n<p><strong>Derek<\/strong>: \u00a0No, they don&#8217;t. I see that too.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Speaking of everybody knowing everything, what about collective code ownership? Is the idea that everyone can work on any part of the system and everybody knows the system to some degree? Is that a reasonable thing? Or should you say, &#8220;It&#8217;s OK that Derek doesn&#8217;t know how to do this right.&#8221;<\/p>\n<p><strong>Derek<\/strong>: \u00a0Some people are too dumb to work on parts of the system.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Right, they shouldn&#8217;t be allowed to work on parts of the system.<\/p>\n<p><strong>Derek<\/strong>: \u00a0People won&#8217;t say that, but that&#8217;s what they&#8217;re saying when they say that. &#8220;Not everybody is as knowledgeable, not everybody is a god like me.&#8221;<\/p>\n<p><strong>Roy<\/strong>: \u00a0Actually this article does say something specifically along those lines and not everybody should be allowed to modify parts of the system.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0I think what they&#8217;re getting at is it&#8217;s not realistic that that is the case. It isn&#8217;t realistic that everybody on the team can work on any part of the system. To me that sounds like, why is your system so complex?<\/p>\n<p><strong>Derek<\/strong>: \u00a0What it sounds to me is why do you hire stupid fucking people? If you have people that you hired to code and you don&#8217;t let them go to certain parts of the code because they&#8217;re not competent to go to the code, why are they employed by you?<\/p>\n<p><strong>Clayton<\/strong>: \u00a0That&#8217;s a good point.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Or if you don&#8217;t let them go into the code because the person that owns that code is extremely territorial over it, then why do you have that territorial person employed, and why are you letting them boss you around?<\/p>\n<p><strong>Derek<\/strong>: \u00a0I don&#8217;t know if you could be Agile without having collective code ownership. The first time you have to say, &#8220;Sorry, Clayton is on vacation, I can&#8217;t really deal with this problem.&#8221; By default, you are not able to respond.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0That&#8217;s true. You couldn&#8217;t respond to that change right?<\/p>\n<p>We&#8217;ve heard that user stories are a representation of a conversation. Why wouldn&#8217;t you write every requirement as a user story? Is it un\u2011Agile to have a requirement on the system that isn&#8217;t a user story?<\/p>\n<p><strong>Derek<\/strong>: \u00a0This one I think they&#8217;re pretty in line with. I think that the multiple formulas that exist out there are really good. I think they help people write good, small parts of the system. I think somebody could go write one or two sentences on a board and still get stuff done just fine, if you have the conversation. I think the actual card and the conversation are far more important than the stories themselves.<\/p>\n<p><strong>Roy<\/strong>: \u00a0One of the values of a user story is that it can&#8217;t give you enough information to substitute for a conversation. I can&#8217;t write a user story that tells you everything you need to know, so you have to come talk to me.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0They talk about using a use case, or a test case, or a wire frame, or something which they are great examples of things you can add on to a user story as you have that conversation, but I don&#8217;t think it&#8217;s an and\/or. If you were to say that you didn&#8217;t write everything in user stories, I could see somebody getting a little crazy with writing too many use cases, and then you go off the deep end in that regard.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Right, and then before you know it you have a full spec outline ahead of time so that we don&#8217;t have to spend this entire time arguing with the developers and negotiating someone&#8217;s criteria.<\/p>\n<p><strong>Derek<\/strong>: \u00a0You get off the rails pretty quick, right? If you don&#8217;t keep it nice and short then we start assume, &#8220;Oh Roy, you&#8217;ve got 80 pages of Cucumber specs for me.&#8221; So I don&#8217;t need to actually ask anything about the system.<\/p>\n<p><strong>Roy<\/strong>: \u00a0It&#8217;s all here.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Clearly you&#8217;ve thought of everything, right?<\/p>\n<p><strong>Clayton<\/strong>: \u00a0The last one talks about relying a product owner. The single ringable neck and having one person that is supposed to be the gateway to the customer. If most Agile shops are doing some form of Agile are probably doing Scrum and they probably have a product owner. How did all the Agile people miss the boat on this one?<\/p>\n<p><strong>Roy<\/strong>: \u00a0I kind of think it would be OK if there was more than one product owner. It doesn&#8217;t necessarily have to be a product owner as long as there is just one backlog. You still get into the problem of if you have this one backlog and you have two different people that are both your boss.<\/p>\n<p>They&#8217;re arguing over what a specific story is supposed to be like. I can still see a ton of problems there. You have to have somebody that makes the final call. Somebody at the top of your organization has the authority to say this and not that.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0I think there&#8217;s a distinction between being the voice, the single point of contact with a customer and the person that makes decisions. Should the only person that ever talks to customers be one person and the product owner?<\/p>\n<p>Probably not, and you should probably find lots of different ways to have that interaction and get that feedback. If you had more people talking to the customer and more people making decisions, I don&#8217;t think that&#8217;s what you would want.<\/p>\n<p><strong>Derek<\/strong>: \u00a0This one is really odd for me in the sense of I&#8217;m starting to find that actually in some ways I believe that having a product owner is non Agile. Part of it is, I think that if a team, when I look at small startups and I see them do things with no product owner.<\/p>\n<p>They really are doing things by committee. They really are doing things by unanimous decision. I think it&#8217;s because they have got strong vision, and they&#8217;re aligned. To me the need of having a product owner who is the one all that says, &#8220;I&#8217;m going to make the decisions so we can move forward.&#8221;<\/p>\n<p>I think that&#8217;s almost a crutch that says that you&#8217;re not providing enough vision that the team is actually aligned behind the product, because if they were, you could get to a unanimous decision fairly quickly. You could be biased towards that action.<\/p>\n<p><strong>Roy<\/strong>: \u00a0That&#8217;s a really interesting point. I hadn&#8217;t thought about it like that. The reason why we always think that you need a product owner is because you have dissenting viewpoints on which way to go.<\/p>\n<p>That&#8217;s because tradition decision making is made by majority vote, in which case you have a bunch of people that aren&#8217;t happy. If you&#8217;re always unanimous, then you have a team that is acting as one anyway so it&#8217;s like it&#8217;s one single [inaudible 00:16:15] .<\/p>\n<p><strong>Derek<\/strong>: \u00a0You probably have a much better product. To be clear, I think product ownership is very necessary is most organizations because they&#8217;re having to deal with them as a dysfunction to how they currently work. I think you could absolutely be on a highly Agile, adaptive, high performing team, and deliver great product, and not have a product owner.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0I think we&#8217;re out of time. Thanks guys!<\/p>\n<p>[music]<\/p>\n<p><strong>Announcer 1<\/strong>: \u00a0If there is something you would like to hear in a future episode, head over to integrum.com\/podcast where you can suggest a topic or guest.<\/p>\n<p><strong>Announcer 2<\/strong>: \u00a0Looking for an easy way to stay up to date with the latest news, techniques, and events in the Agile community? Sign up today at Agileweekly.com. It&#8217;s the best Agile content delivered weekly, for free!<\/p>\n<p><strong>Announcer 1<\/strong>: \u00a0The Agile Weekly Podcast is brought to you by Integrum Technologies and recorded in Gangplank Studios in Chandler Arizona. For old episodes check out integrumtech.com, or subscribe on iTunes.<\/p>\n<p><strong>Announcer 3<\/strong>: \u00a0Need help with your Agile transition? Have a question, and need to phone a friend? Try calling the Agile hotline. It&#8217;s free. Call (866)244\u20118656<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Roy van de Water, Derek Neighbors and Clayton Lengel-Zigich discuss an article that has been making the rounds in the Agile community this week: 7 &hellip;<\/p>\n","protected":false},"author":10,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[56,70,173],"_links":{"self":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/posts\/7287"}],"collection":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/users\/10"}],"replies":[{"embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/comments?post=7287"}],"version-history":[{"count":0,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/posts\/7287\/revisions"}],"wp:attachment":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/media?parent=7287"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/categories?post=7287"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/tags?post=7287"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}