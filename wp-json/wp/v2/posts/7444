{"id":7444,"date":"2014-05-01T06:00:24","date_gmt":"2014-05-01T13:00:24","guid":{"rendered":"http:\/\/integrumtech.com\/?p=7444"},"modified":"2014-05-01T06:00:24","modified_gmt":"2014-05-01T13:00:24","slug":"episode-136-simple","status":"publish","type":"post","link":"http:\/\/integrumtech.com\/2014\/05\/episode-136-simple\/","title":{"rendered":"Episode #136 &#8211; Simple"},"content":{"rendered":"<p>Derek Neighbors, Jade Meskill, Clayton Lengel-Zigich, and Roy van de Water discuss:<\/p>\n<ul>\n<li>Simplicity<\/li>\n<\/ul>\n<p><em>Transcript<\/em><\/p>\n<p>[laughter]<\/p>\n<p><strong>Clayton Lengel\u2011Zigich<\/strong>: \u00a0It is hard doing that every week.<\/p>\n<p>[laughter]<\/p>\n<p><strong>Derek Neighbors<\/strong>: \u00a0You don&#8217;t do it quite as good as Jade does.<\/p>\n<p><strong>Jade Meskill<\/strong>: \u00a0All right, go Roy.<\/p>\n<p><strong>Roy van de Water<\/strong>: \u00a0Hello and welcome to another episode of the Agile Weekly Monthly Podcast. I&#8217;m Roy van de Water.<\/p>\n<p><strong>Jade<\/strong>: \u00a0I&#8217;m Jade Meskill.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0I&#8217;m Clayton Lengel\u2011Zigich.<\/p>\n<p><strong>Derek<\/strong>: \u00a0I&#8217;m Derek Neighbors and joining us today is the improv group.<\/p>\n<p><strong>Roy<\/strong>: \u00a0In the room next door.<\/p>\n<p>[laughter]<\/p>\n<p><strong>Jade<\/strong>: \u00a0Yelling very loudly.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Today we are talking about thinking simply, instead of thinking complexly. Jade, you and I have been&#8230;<\/p>\n<p><strong>Jade<\/strong>: \u00a0Accused of being simple?<\/p>\n<p><strong>Roy<\/strong>: \u00a0Accused of being simple.<\/p>\n<p>[laughter]<\/p>\n<p><strong>Roy<\/strong>: \u00a0Can you tell me a little about what that idea means?<\/p>\n<p><strong>Jade<\/strong>: \u00a0Sure. We&#8217;ve been trying to&#8230;<\/p>\n<p>[shouting in background]<\/p>\n<p><strong>Jade<\/strong>: \u00a0These guys are really&#8230; [laughs] yelling in there.<\/p>\n<p>[laughter]<\/p>\n<p><strong>Roy<\/strong>: \u00a0I&#8217;d like to denote that they were entirely quite for the last 45 minutes before we walked into this studio.<\/p>\n<p><strong>Derek<\/strong>: \u00a0It&#8217;s like they&#8217;re Chicago trading for [indecipherable 1:10] .<\/p>\n<p>[laughter]<\/p>\n<p><strong>Jade<\/strong>: \u00a0Buy! Buy! Sell! Sell! [laughs]<\/p>\n<p><strong>Derek<\/strong>: \u00a0You do the savings, I&#8217;ll do it.<\/p>\n<p>[laughter]<\/p>\n<p><strong>Jade<\/strong>: \u00a0We&#8217;ve been working on some concepts of trying to write very, very small, simple applications, taking the UNIX philosophy and applying it to web applications to avoid the over\u2011complication that tends to arise in larger systems.<\/p>\n<p><strong>Roy<\/strong>: \u00a0What does an over\u2011complication look like?<\/p>\n<p><strong>Jade<\/strong>: \u00a0Usually a system where the responsibility is not very well delineated between either modules or different parts of the application. It tends to be very messy and sloppy, where it&#8217;s hard to tell where something&#8230;There&#8217;s no discrete functionality, I guess is the best way to say it.<\/p>\n<p><strong>Derek<\/strong>: \u00a0The way that I think about it is, if you had a web application where the code that displays the page where you enter in the details about a job is in the same place as the code that makes the&#8230;Say the job in a database in the same place in the code that schedules the job, in the same place in the code that runs the schedule of job, in the same place in the code that&#8230;They&#8217;re all in the same place.<\/p>\n<p><strong>Roy<\/strong>: \u00a0It sounds like everything is in the same place, it sounds pretty simple to me.<\/p>\n<p>[laughter]<\/p>\n<p><strong>Derek<\/strong>: \u00a0Right, until you get everything in the same place, and then something goes wrong, or you want to change something. We have this problem with the Agile Weekly podcast or Agile Weekly website, where we had a bunch of things that were all clinched together.<\/p>\n<p>If I took the approach of a normal, say, Rails application, like the standard Rails way of doing things. When certain pieces of the system got a little too big, or too unwieldy, it was hard to&#8230;it seemed like it was simple because it was all in the same place, but the real simplicity came when we broke those out into little pieces.<\/p>\n<p>Then you have these&#8230;you&#8217;re going back to [indecipherable 3:08] sampler, mentioning the UNIX philosophy, with these little teeny pieces that all did their one little thing really well. They all just worked together.<\/p>\n<p><strong>Roy<\/strong>: \u00a0So why wasn&#8217;t it obvious to be that way in the first place?<\/p>\n<p><strong>Jade<\/strong>: \u00a0Because in the beginning that would have actually been more complex.<\/p>\n<p><strong>Roy<\/strong>: \u00a0So how do you know when you are doing something complexly instead of simply?<\/p>\n<p><strong>Jade<\/strong>: \u00a0I think when it becomes hard to explain, it&#8217;s probably too complicated.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Is that like the metaphor ideal, like you should be able to describe whatever you&#8217;re building as a metaphor, and as soon as your metaphor circuit is breaking down that means that you&#8217;re putting too much in there? Is that&#8230;<\/p>\n<p><strong>Jade<\/strong>: \u00a0I think that&#8217;s a good way of putting it. If it&#8217;s not something that you can explain in a simple, conceptual way, it&#8217;s probably gotten a little bit out of control.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Is this idea of complexity versus simplicity something that is on the overall project, or is it something that you see replicating down to the individual components of a method, or a class, or something like that?<\/p>\n<p><strong>Jade<\/strong>: \u00a0It&#8217;s an important recursive idea that happens. If you are being simple with the very small parts of your system, it&#8217;s easier to be simple at the larger scale as well.<\/p>\n<p><strong>Derek<\/strong>: \u00a0I think developers in general&#8230;they find it easier to think in these terms when they&#8217;re maybe down in the class with the [indecipherable 4:31] methods. I think that&#8217;s where they live, and all that stuff. Then you go up a few levels and even talking about what features you&#8217;re delivering.<\/p>\n<p>I think a lot of developers might understand that concept at that level, but then it gets in the features and it&#8217;s like, &#8220;Well, the product guy said just build this stuff, and like well, OK, whatever, I don&#8217;t care.&#8221; Where I think that&#8217;s the even more important part, that&#8217;s an equally important part to be having this discussion about simple&#8230;<\/p>\n<p>The planning meetings that we&#8217;ve been involved in lately for sure. I think we&#8217;re constantly driving towards trying to find something that&#8217;s simple, but not too simple, or not too simplistic. That&#8217;s a really hard thing to do.<\/p>\n<p><strong>Jade<\/strong>: \u00a0Yeah, I think being simple is hard.<\/p>\n<p><strong>Roy<\/strong>: \u00a0So this is the type of thing that I might solve using design patterns, like, &#8220;Can I just throw those at this problem?&#8221;<\/p>\n<p>[laughter]<\/p>\n<p><strong>Jade<\/strong>: \u00a0We have an observer. Let&#8217;s find out&#8230;<\/p>\n<p>[crosstalk]<\/p>\n<p><strong>Clayton<\/strong>: \u00a0I think the interesting thing to me, it&#8217;s always easier to add complexity that it is to remove complexity. When you start to get that Zen peace, it&#8217;s way easier to say, &#8220;Let&#8217;s start super simple and we can add what we need to add,&#8221; which is a very hard discipline to build.<\/p>\n<p>Even if you&#8217;re talking product. That struck it for me. Can&#8217;t say how many times you&#8217;re talking about a feature and you&#8217;re up there at a whiteboard drawing it out, and somebody&#8217;s like, &#8220;Well that&#8217;s just too simple.&#8221;<\/p>\n<p>At the end of the day, if you give this to the developers, it might turn into a two\u2011week feature request even though it sounds so simple right now, on the surface. As human beings we like to overcomplicate everything all the time.<\/p>\n<p><strong>Roy<\/strong>: \u00a0What drives that, though? Why do we want to overcomplicate things?<\/p>\n<p><strong>Clayton<\/strong>: \u00a0Some of it is uncertainty, or, we have this need for completeness. If we only say we&#8217;re going to show X, it&#8217;s like, &#8220;Yeah, but Y and Z and A and B are all available to us, too. We have to show them.&#8221;<\/p>\n<p>&#8220;Why? What if we just showed X? What if X is enough? That is all that feature needs, why do we need the&#8230;&#8221;<\/p>\n<p>&#8220;Because those other things exist, so we have to show them.&#8221; There&#8217;s very much this, because we can, we should, mentality.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Another thing we see in our work is that people have an aversion or misunderstanding of iterative development. It&#8217;s like, if we don&#8217;t do this now, we&#8217;re&#8230;<\/p>\n<p><strong>Jade<\/strong>: \u00a0You mean incremental development?<\/p>\n<p><strong>Derek<\/strong>: \u00a0Yeah. If we don&#8217;t do this now, we&#8217;re never going to do it. If you guys don&#8217;t plan every single thing that we think we know, then we&#8217;re totally screwed. You guys are going to forget it.<\/p>\n<p>To be fair, I bet you there&#8217;s a lot of product people out there who have teams that maybe aren&#8217;t the most reliable and don&#8217;t deliver what they say they&#8217;re going to deliver, and all those things.<\/p>\n<p>When someone were to come in and say, &#8220;Hey, we&#8217;re going to do some really simple thing and ship it real soon,&#8221; it&#8217;s like, &#8220;Yeah&#8230;I don&#8217;t believe you.&#8221; Like, I&#8217;m not going to take that risk.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0To me, it sounds like there&#8217;s a little bit of the 85\u201115 rule, where you can deliver 85 percent of the value with 15 percent of the effort. Then you spend the other 85 percent of your time delivering the last 15 percent of the value.<\/p>\n<p>I have worked with different product people, designers and architects in the past, where they want to get all 100 percent, because they know that if you spend 15 percent of the effort now to deliver 85 percent of the value, you&#8217;re never going to spend the other 85 percent to deliver the last 15 percent.<\/p>\n<p>Which may be a really awesome business decision, but you&#8217;ll never be 100 percent as good as it could be.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Some of it is, building off Clayton&#8217;s response there, is, there are a lot of teams where if you say, &#8220;OK, fine, let&#8217;s just do X.&#8221;<\/p>\n<p>You say, &#8220;OK, let&#8217;s do Y.&#8221; &#8220;OK, let&#8217;s do Z.&#8221; Then you say, &#8220;OK, let&#8217;s do A.&#8221;<\/p>\n<p>Then they&#8217;re like, &#8220;We&#8217;re going to have to re\u2011evaluate the whole thing. If you would have told us up front that we had to do A, we would have totally built this in a different way. Now that you want A, we just have to throw away the last six months&#8217; worth of work, and start all over, and if only you would&#8217;ve told us.&#8221;<\/p>\n<p>Once they get trained for that it becomes, if I know anything I must disclose it now and tell you that you have to build it into the app, because if I disclose it later you may come back and tell me, &#8220;Oh man, we have to throw everything out and start again.&#8221;<\/p>\n<p><strong>Clayton<\/strong>: \u00a0By disclosing everything up front and insisting that it all gets done, the product owner is really trying to maximize his choice later on down the road. His ability to choose later on.<\/p>\n<p><strong>Roy<\/strong>: \u00a0They&#8217;re trying to mitigate their risk, I believe. If they disclose all that and say we need to do all of that, then they think they&#8217;re mitigating the risk of somebody coming back later and saying, &#8220;Oh, we can&#8217;t do that because you didn&#8217;t tell us.&#8221;<\/p>\n<p>In reality, what they do is increase their risk exponentially, because they make it so it becomes almost impossible to deliver what they&#8217;re asking for.<\/p>\n<p><strong>Jade<\/strong>: \u00a0The cognitive load becomes much more to deal with and &#8220;grok&#8221; all of those additional features when they&#8217;re not needed.<\/p>\n<p><strong>Derek<\/strong>: \u00a0It sounds to me like then you&#8217;re going to try to build a system that&#8217;s overly architected just in case you have to build any of the number of features you&#8217;re told you have to support.<\/p>\n<p><strong>Roy<\/strong>: \u00a0One thing recently that clarified this a bit more for me was that we had a situation where we wanted to deliver some features that would have been nice to have a database.<\/p>\n<p>Having a database was a non\u2011trivial thing, so we used the file\u2011system. We had a table with a row and a column in it. That&#8217;s all there was.<\/p>\n<p><strong>Derek<\/strong>: \u00a0A folder with files in it?<\/p>\n<p><strong>Roy<\/strong>: \u00a0Yeah. We had a folder with files. That was sufficiently complex for what we wanted to do. I think some people hear that, and they think, &#8220;What are you, f\u2011ing crazy? You can&#8217;t use the file\u2011system&#8230;&#8221;<\/p>\n<p>[laughter]<\/p>\n<p><strong>Roy<\/strong>: \u00a0&#8220;&#8230;Use a database, that&#8217;s crazy.&#8221; What we understood was, right now, for what we&#8217;re trying to do, for this little slice, that&#8217;s what we need right now. We acknowledged that that is not a long\u2011term solution, but it&#8217;s going to be as long\u2011term as it needs to be for what we want to do with it.<\/p>\n<p><strong>Jade<\/strong>: \u00a0It was very simple to replace.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Exactly.<\/p>\n<p><strong>Derek<\/strong>: \u00a0I think where this started to come and play for me was when we started to cross the chasm, so to speak, in doing a lot more mobile development.<\/p>\n<p>So things that we thought were pretty trick and pretty sleek and pretty simple and pretty small started to fall down really quick when a customer would say, &#8220;hey by the way, I need an android version or an iPhone version of this.&#8221; and I was like, &#8220;oh shit, like dude like how in the, man!&#8221;<\/p>\n<p>And so when it got to the point like &#8220;OK, let&#8217;s make everything like API and we&#8217;ll have the front end consumed of the web version consume that API and hey now we can have the iPhone version.&#8221;<\/p>\n<p><strong>Jade<\/strong>: \u00a0Anything can use this API<\/p>\n<p><strong>Derek<\/strong>: \u00a0API right like it started to like I think click a little bit more just even in that that you could kind of separate this concerns a little bit better.<\/p>\n<p>Then you can start to say &#8220;OK how about make perhaps even smaller and smaller,&#8221; and keep slicing those so that they are easier and easier to replace, so when you do find something new you might not have to rewrite the whole system to do something. You might be able to rewrite a little piece of the system to do something which is a lot less risk and a lot easier to do.<\/p>\n<p><strong>Jade<\/strong>: \u00a0That&#8217;s kind of where [indecipherable 11:27] and I got into writing these micro\u2011applications that had very discreet functionality.<\/p>\n<p>We were having trouble, even with that simplified view of things of just having an API and a web service that was still wasn&#8217;t good enough. There was still too much co\u2011mingling of functionality between different classes and you know, the abstractions were good enough.<\/p>\n<p>We took a crazy stance and tried to work on like how can we build the smallest possible thing to do this one job, and then chain all of those things together as needed?<\/p>\n<p><strong>Roy<\/strong>: \u00a0I felt like that worked for those instances I am curious to try more places and see how well it runs across the board.<\/p>\n<p>In that case it was a project that only ended up being a collection of five or six of these smaller apps, but when you start to build a more complex user experience where you have a whole store form or something where the user [indecipherable 12:24] component you try to keep all of those pieces separate. I wonder how well that&#8217;s going to play together.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0I feel pretty confident in it from the next example like; pick any five UNIX commands. It could probably do a bunch of stuff. If you chose wisely.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Yeah, It does fall down at certain point though. What I mean by that is, there&#8217;s a whole lot of things people do, they don&#8217;t do with Unix commands any more. You could use &#8220;set OK&#8221; and &#8220;grip&#8221; to do a whole lot of things.<\/p>\n<p><strong>Jade<\/strong>: \u00a0Everything<\/p>\n<p><strong>Derrck<\/strong>: \u00a0But you probably open up &#8220;vi&#8221; or &#8220;sublime&#8221; to do it instead because the interface is easier even though its [indecipherable 13:00] all mashed into an application than a whole lot more than those simple things.<\/p>\n<p>I think there are this kind of. It is nice to assemble them small\u2011ly. Into small little apps that interact but when you have to chain too many interactions together, the complexity of remembering what and how to chain things starts to become cumbersome.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0That and when there&#8217;s like a whole bunch of apps that you don&#8217;t even know existed.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Yeah<\/p>\n<p><strong>Clayton<\/strong>: \u00a0So you start rewriting them yourself<\/p>\n<p><strong>Derek<\/strong>: \u00a0Yeah. What tends to happen is when you have things that have common things you start to see those assembled into other apps.<\/p>\n<p>I would say that OK and grip get used within most editors the developers use today. Because they make sense to kind of bundle natively into an editor rather than a drop out to a shell and do them. I think the work that those things did and put in place are straight up stolen and re\u2011used inside of those editors.<\/p>\n<p><strong>Jade<\/strong>: \u00a0It&#8217;s like when we talked about, we built a simple app but at some point it became too complicated. It was simpler to take a different approach of writing smaller, more complicated apps. Think this is the contrary example of at some point that becomes absurd. The interactions are too complicated.<\/p>\n<p><strong>Derek<\/strong>: \u00a0Right.<\/p>\n<p><strong>Jade<\/strong>: \u00a0Now you find a simpler way to merge those things together.<\/p>\n<p><strong>Derek<\/strong>: \u00a0It goes back to; it&#8217;s always easier to get more complex.<\/p>\n<p>If we&#8217;ve got the set the OK, the grip, and we need to put them all together like we know those things really well now and so we know how to assemble them into an interface or into certain things a lot better than if we would have tried to build those things as part of the bigger complicated thing to start with.<\/p>\n<p><strong>Jade<\/strong>: \u00a0I think that&#8217;s where some of the ideas around, like hexagonal design can come into play. Where you&#8217;re composing complex systems out of simpler modules and simpler pieces.<\/p>\n<p><strong>Clayton<\/strong>: \u00a0We&#8217;ve been talking a lot about in terms of software, but this same stuff applies to process things.<\/p>\n<p>You can take the components and do them very well and you can build some sort of process that works and maybe it gets too big sometimes or maybe you decompose or whatever, but it&#8217;s not just whole scale, you know.<\/p>\n<p>From a coding example, jumping straight into some massive java architecture thing and that&#8217;s the same thing as like what you&#8217;re going to get on the juror train and see if this mother app&#8230;<\/p>\n<p>[laughter]<\/p>\n<p><strong>Clayton<\/strong>: \u00a0&#8230;Or it&#8217;s like trying to get a good user story. I am like &#8220;let&#8217;s try and get good at talking to each other as a team first.&#8221;<\/p>\n<p><strong>Derek<\/strong>: \u00a0Let&#8217;s get good at working together.<\/p>\n<p><strong>Jade<\/strong>: \u00a0Yeah, let&#8217;s try those things first and then you know, you can juror me to death.<\/p>\n<p><strong>Roy<\/strong>: \u00a0Hey I will see you next month<\/p>\n<p>[music]<\/p>\n<p><strong>Presenter 1<\/strong>: \u00a0Is there something you would like to hear in the future episodes, head over to inagram.com\/podcasts or you can suggest a topic or guest.<\/p>\n<p><strong>Presenter 2<\/strong>: \u00a0Looking for an easy way to stay up to date with the latest news, techniques and events in the agile community? Sign up today at agileweekly.com. It&#8217;s the best agile\u2011content delivered weekly for free.<\/p>\n<p>The agile weekly podcast is brought to you by inagram technologies and recorded in gangplank studios in Chandler, Arizona.<\/p>\n<p>For old episodes check out inagramtech.com or subscribe on iTunes.<\/p>\n<p><strong>Presenter 3<\/strong>: \u00a0Need help with your agile transition? Have a question and need to phone a friend? Try calling the agile hotline. It&#8217;s free, call 866\u20112448656.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Derek Neighbors, Jade Meskill, Clayton Lengel-Zigich, and Roy van de Water discuss: Simplicity Transcript [laughter] Clayton Lengel\u2011Zigich: \u00a0It is hard doing that every week. [laughter] &hellip;<\/p>\n","protected":false},"author":10,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[56,70,115,173],"_links":{"self":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/posts\/7444"}],"collection":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/users\/10"}],"replies":[{"embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/comments?post=7444"}],"version-history":[{"count":0,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/posts\/7444\/revisions"}],"wp:attachment":[{"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/media?parent=7444"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/categories?post=7444"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/integrumtech.com\/wp-json\/wp\/v2\/tags?post=7444"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}